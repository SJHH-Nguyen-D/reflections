When would you want to use a remote repository rather than keeping all your work local?

you want to use a remote repository when you are pulling from an online repo such as one from GitHub, so that you can do collaborative and parallelized work. This way, other people on your team can collaborate on the same project at the same time as you. Having things stored locally is risky if you do not have backup for it.

I am making a small change here just for the sake of the exercise

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?


You want to pull manually because you don't know whether the changes up on the remote repo would be beneficial to you or not. The changes made directly on GitHub repo might be deleterous by introducing a bug and therefore you may want to be judicious about your pulling from the online repo.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

forks are a copy of someone's repo online that you now have on your online repo. forks are like clones, except they exist on GitHub, whereas clones exist locally. You can clone from a fork but not fork from a clone. That would just be you pushing into an empty repo on Github. Branches are a split from your commit chain and although they sound similar to the concept of forking, they are only done locally. You would branch for when you want to create a subproject of your master or production level branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

the benefit of having a copy of the last known state of the remote stored locally helps us to understand where the author left off with the remote and what updates and advancements to their code have we improved upon.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If we were to collaborate without using git or github, it would be more difficult as proposing changes and having a main devleopment workflow and keeping it consistent across the various players/nodes would be difficult. Having a main repo to collaborate on/split work flow/propose changes collaboratively would help prevent duplication of work and reduce the risk of bugs and collisions by the end of the project.